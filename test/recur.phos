fn fact(x: i64) -> i64 {
    if (x == 1) return 1;
    return x * fact(x - 1);
}

fn fib(x: i64) -> i64 {
    if (x <= 1) return x;
    else return fib(x - 1) + fib(x - 2);
}

let x : i64 = 10;
let y := 10;

print(fact(x));
print(fib(y));

model Point {
    let x: int;
    let y: int = 10;
    let z:=0;

    fn add(this, Point p) -> Point {
        return Point { .y = (this.y + p.y), .x = (this.x + p.x) };
    }
}

fn compare(x: i64, y: i64, cmp: | x: i64, y: i64 | -> bool) -> bool {
    return cmp(x, y);
}

let c := |a: i64, b: i64| -> bool   { return a > b };
let c :  |a: i64, b: i64| -> bool = { return a < b };
let c :  |a: i64, b: i64| -> bool = |a: i64, b: i64| -> bool { return a < b };
